<?= $this->extend('layout/main') ?>

<?= $this->section('title') ?>Certificates<?= $this->endSection() ?>

<?= $this->section('styles') ?>
<style>
    .status-badge {
        padding: 5px 10px;
        border-radius: 4px;
        font-size: 0.875rem;
    }
    body {
        background-color: #f8f9fa;
        overflow-x: hidden;
        padding: 0;
        margin: 0;
        min-height: 100vh;
        position: relative;
    }
    /* Side Panel Styles */
    .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 250px;
        background: linear-gradient(135deg, #0c2461 0%, #1e3799 100%);
        color: #fff;
        z-index: 1000;
        padding-top: 80px;
        transition: all 0.3s ease;
    }
    .sidebar .nav-link {
        color: rgba(255, 255, 255, 0.85);
        padding: 12px 20px;
        margin: 4px 15px;
        border-radius: 5px;
        transition: all 0.3s;
        font-weight: 500;
    }
    .sidebar .nav-link:hover, .sidebar .nav-link.active {
        background-color: rgba(255, 255, 255, 0.1);
        color: #fff;
        transform: translateX(5px);
    }
    .sidebar .nav-link i {
        margin-right: 10px;
        width: 20px;
        text-align: center;
    }
    .brand-wrapper {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 80px;
        background: rgba(0, 0, 0, 0.1);
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 0 20px;
        z-index: 1001;
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    .brand-wrapper img {
        max-height: 45px;
        width: auto;
        filter: brightness(1.1);
    }
    .main-content {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 60px;
        left: 250px;
        background-color: #f8f9fa;
        overflow-x: hidden;
        overflow-y: auto;
    }
    .content-wrapper {
        max-width: 1800px;
        margin: 0 auto;
        padding: 20px;
    }
<!-- Brand/Logo Section -->
<div class="brand-wrapper">
    <img src="<?= base_url('smec_white.png') ?>" alt="SMEC Logo" class="img-fluid">
</div>

<!-- Sidebar -->
<div class="sidebar">
    <div class="sidebar-sticky">
        <nav class="nav flex-column">
            <a class="nav-link <?= $activePage === 'dashboard' ? 'active' : '' ?>" href="<?= site_url('admin/dashboard') ?>">
                <i class="fas fa-tachometer-alt"></i> Dashboard
            </a>
            <a class="nav-link <?= $activePage === 'certificates' ? 'active' : '' ?>" href="<?= site_url('admin/certificates') ?>">
                <i class="fas fa-certificate"></i> Certificates
            </a>
            <?php if (session('role') === 'super_admin'): ?>
            <a class="nav-link <?= $activePage === 'users' ? 'active' : '' ?>" href="<?= site_url('admin/users') ?>">
                <i class="fas fa-users"></i> Users
            </a>
            <?php endif; ?>
            <a class="nav-link" href="<?= site_url('logout') ?>">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </nav>
    </div>
</div>

<div class="main-content">
    <div class="content-wrapper">
        <!-- Error Display -->
        <?php if (session()->has('error')): ?>
            <div class="alert alert-danger"><?= session('error') ?></div>
        <?php endif; ?>
        <?php if (session()->has('success')): ?>
            <div class="alert alert-success"><?= session('success') ?></div>
        <?php endif; ?>
        
        <!-- Alert Container for JavaScript messages -->
        <div id="alertContainer"></div>
        padding-bottom: 40px;
    }
    /* Card Styles */
    .table-card {
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0,0,0,0.1);
        border: none;
        margin-bottom: 30px;
    }
    .stat-card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 5px 15px rgba(0,0,0,0.05);
        transition: transform 0.3s, box-shadow 0.3s;
        overflow: hidden;
        background: #fff;
    }
    .stat-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0,0,0,0.1);
    }
    .status-badge {
        padding: 5px 12px;
        border-radius: 20px;
    }
    .card-header {
        border-bottom: 1px solid rgba(0,0,0,0.05);
        background: #fff;
    }
    .stat-card .icon-wrapper {
        width: 65px;
        height: 65px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background: rgba(255, 255, 255, 0.2);
        margin-bottom: 15px;
    }
    /* Table Styles */
    .table-responsive {
        overflow-x: auto;
        -webkit-overflow-scrolling: touch;
        margin: 0;
    }
    /* Footer Styles */
    .footer {
        position: fixed;
        bottom: 0;
        left: 250px;
        right: 0;
        height: 60px;
        background: #fff;
        border-top: 1px solid rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        padding: 0 25px;
        z-index: 1000;
    }
    .footer-content {
        max-width: 1800px;
        width: 100%;
        margin: 0 auto;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    /* Responsive Design */
    @media (max-width: 992px) {
        .sidebar {
            transform: translateX(-100%);
            z-index: 1030;
        }
        .sidebar.show {
            transform: translateX(0);
        }
        .main-content {
            left: 0;
        }
        .footer {
            left: 0;
        }
        .content-wrapper {
            padding: 15px;
        }
        .toggle-sidebar {
            display: block !important;
            position: fixed;
            top: 15px;
            left: 15px;
            z-index: 1040;
        }
    }
    .toggle-sidebar {
        display: none;
    }
</style>
<?= $this->endSection() ?>

<?= $this->section('content') ?>
<!-- Brand/Logo Section -->
<div class="brand-wrapper">
    <img src="<?= base_url('smec_white.png') ?>" alt="SMEC Logo" class="img-fluid">
</div>

<!-- Sidebar -->
<div class="sidebar">
    <ul class="nav flex-column">
        <li class="nav-item">
            <a class="nav-link" href="<?= site_url('admin/dashboard') ?>">
                <i class="fas fa-tachometer-alt"></i> Dashboard
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link active" href="<?= site_url('admin/certificates') ?>">
                <i class="fas fa-certificate"></i> Certificates
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link" href="<?= site_url('admin/search-logs') ?>">
                <i class="fas fa-search"></i> Search Logs
            </a>
        </li>
        <?php if (session()->get('role') === 'super_admin'): ?>
        <li class="nav-item">
            <a class="nav-link" href="<?= site_url('admin/admins') ?>">
                <i class="fas fa-users-cog"></i> Manage Admins
            </a>
        </li>
        <?php endif; ?>
        <li class="nav-item">
            <a class="nav-link" href="<?= site_url('admin/profile') ?>">
                <i class="fas fa-user-circle"></i> Profile
            </a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-danger" href="<?= site_url('auth/logout') ?>">
                <i class="fas fa-sign-out-alt"></i> Logout
            </a>
        </li>
    </ul>
</div>

<!-- Mobile Toggle Button -->
<button class="btn btn-primary toggle-sidebar">
    <i class="fas fa-bars"></i>
</button>

<!-- Main Content Area -->
<?php if (session()->has('success')): ?>
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <i class="fas fa-check-circle me-2"></i> <?= session('success') ?>
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
<?php endif; ?>

<div class="main-content">
    <div class="content-wrapper">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-0">Certificate Management</h1>
                    <p class="text-muted">Manage and track all certificates</p>
                </div>
                <div class="btn-toolbar">
                    <div class="btn-group me-2">
                        <button type="button" class="btn btn-sm btn-outline-primary">
                            <i class="fas fa-file-export me-1"></i> Export
                        </button>
                        <button type="button" class="btn btn-sm btn-primary" data-bs-toggle="modal" data-bs-target="#importModal">
                            <i class="fas fa-file-import me-1"></i> Import
                        </button>
                    </div>
                </div>
            </div>

            <!-- Filters and Search -->
            <div class="card table-card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="input-group">
                                <span class="input-group-text bg-light border-end-0">
                                    <i class="fas fa-search text-muted"></i>
                                </span>
                                <input type="search" class="form-control border-start-0 ps-0" placeholder="Search certificates...">
                            </div>
                        </div>
                        <div class="col-md-6 text-md-end mt-3 mt-md-0">
                            <div class="btn-group">
                                <button type="button" class="btn btn-outline-secondary btn-sm active">All</button>
                                <button type="button" class="btn btn-outline-success btn-sm">Verified</button>
                                <button type="button" class="btn btn-outline-warning btn-sm">Pending</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Certificates Table -->
            <div class="card table-card">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover align-middle mb-0">
                            <thead class="bg-light">
                                <tr>
                                    <th class="px-3" style="width: 60px;">No.</th>
                                    <th class="px-4">Certificate No</th>
                                    <th>Student Name</th>
                                    <th>Course</th>
                                    <th>Issue Date</th>
                                    <th>Status</th>
                                    <th class="text-end px-4">Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <?php 
                                $counter = 1;
                                if (isset($pager) && $pager->getCurrentPage() > 1) {
                                    $counter = (($pager->getCurrentPage() - 1) * $pager->getPerPage()) + 1;
                                }
                                foreach ($certificates as $cert): ?>
                                <tr>
                                    <td class="px-3 text-muted"><?= $counter++ ?></td>
                                    <td class="px-4"><?= esc($cert['certificate_no']) ?></td>
                                    <td><?= esc($cert['student_name']) ?></td>
                                    <td><?= esc($cert['course']) ?></td>
                                    <td><?= date('d M Y', strtotime($cert['date_of_issue'])) ?></td>
                                    <td>
                                        <span class="status-badge bg-<?= $cert['status'] === 'Verified' ? 'success' : ($cert['status'] === 'Pending' ? 'warning' : 'danger') ?>">
                                            <?= esc($cert['status']) ?>
                                        </span>
                                    </td>
                                    <td class="text-end px-4">
                                        <div class="btn-group">
                                            <div class="btn-group">
                                                <?php if (session('role') === 'super_admin' && $cert['status'] === 'Pending'): ?>
                                                    <button type="button" class="btn btn-sm btn-outline-success update-status-btn" 
                                                            data-id="<?= $cert['id'] ?>" data-status="Approved">
                                                        <i class="fas fa-check"></i> Approve
                                                    </button>
                                                    <button type="button" class="btn btn-sm btn-outline-warning update-status-btn" 
                                                            data-id="<?= $cert['id'] ?>" data-status="Rejected">
                                                        <i class="fas fa-times"></i> Reject
                                                    </button>
                                                <?php endif; ?>
                                                
                                                <button type="button" class="btn btn-sm btn-outline-primary edit-btn" 
                                                        data-id="<?= $cert['id'] ?>"
                                                        data-certificate_no="<?= htmlspecialchars($cert['certificate_no'] ?? '') ?>"
                                                        data-student_name="<?= htmlspecialchars($cert['student_name'] ?? '') ?>"
                                                        data-course="<?= htmlspecialchars($cert['course'] ?? '') ?>"
                                                        data-date_of_issue="<?= $cert['date_of_issue'] ?? '' ?>">
                                                    <i class="fas fa-edit"></i> Edit
                                                </button>
                                                
                                                <button type="button" class="btn btn-sm btn-outline-danger delete-certificate-btn" 
                                                        data-id="<?= $cert['id'] ?>">
                                                    <i class="fas fa-trash"></i> Delete
                                                </button>
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                                <?php endforeach; ?>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer border-0 bg-light">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-muted small">
                            Showing <?= count($certificates) ?> entries
                        </div>
                        <div>
                            <?= $pager->links() ?>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    <footer class="footer">
        <div class="footer-content">
            <div class="text-muted">
                &copy; <?= date('Y') ?> SMEC Certificate Verification System
            </div>
            <div class="d-flex align-items-center">
                <span class="badge bg-primary me-2">Version 1.0</span>
                <span class="text-muted">Powered by CodeIgniter 4</span>
            </div>
        </div>
    </footer>
</div>

<!-- Approve Confirmation Modal -->
<div class="modal fade" id="approveModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Approve Certificate</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to approve this certificate?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="confirmApprove">Approve</button>
            </div>
        </div>
    </div>
</div>

<!-- Reject Confirmation Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Reject Certificate</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to reject this certificate?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmReject">Reject</button>
            </div>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Delete Certificate</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete this certificate? This action cannot be undone.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Edit Certificate Modal -->
<div class="modal fade" id="editModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Certificate</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="editForm" onsubmit="return updateCertificate(event)">
                <div class="modal-body">
                    <input type="hidden" id="editId" name="id">
                    <div class="mb-3">
                        <label class="form-label">Certificate Number</label>
                        <input type="text" class="form-control" id="editCertificateNo" name="certificate_no" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Student Name</label>
                        <input type="text" class="form-control" id="editStudentName" name="student_name" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Course</label>
                        <input type="text" class="form-control" id="editCourse" name="course" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date of Issue</label>
                        <input type="date" class="form-control" id="editDateOfIssue" name="date_of_issue" required>
                    </div>
                    <?php if (session('role') === 'super_admin'): ?>
                    <div class="mb-3">
                        <label class="form-label">Status</label>
                        <select class="form-control" id="editStatus" name="status">
                            <option value="Pending">Pending</option>
                            <option value="Verified">Verified</option>
                            <option value="Rejected">Rejected</option>
                        </select>
                    </div>
                    <?php endif; ?>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="submit" class="btn btn-primary">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div><!-- Import Modal -->
<div class="modal fade" id="importModal" tabindex="-1" aria-labelledby="importModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="importModalLabel">Import Certificates</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>
                    Please upload an Excel file with the correct format. 
                    <a href="<?= base_url('sample_certificate_import.xlsx') ?>" class="alert-link">Download sample file</a>.
                </div>
                
                <div id="importAlert" class="d-none"></div>
                
                <?= form_open_multipart(base_url('admin/certificate/import'), ['id' => 'importForm']) ?>
                    <?= csrf_field() ?>
                    <div class="mb-3">
                        <label for="excel_file" class="form-label">Select Excel File</label>
                        <input class="form-control" type="file" id="excel_file" name="excel_file" accept=".xlsx, .xls, .csv" required>
                        <div class="form-text">Supported formats: .xlsx, .xls, .csv</div>
                    </div>
                    
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="skipHeader" name="skip_header" checked>
                            <label class="form-check-label" for="skipHeader">
                                Skip first row (header)
                            </label>
                        </div>
                    </div>
                    
                    <div class="progress mb-3 d-none" id="importProgress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar" style="width: 0%"></div>
                    </div>
                    
                    <div class="d-flex justify-content-between">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="importSubmit">
                            <i class="fas fa-upload me-1"></i> Import
                        </button>
                    </div>
                <?= form_close() ?>
                
                <div class="mt-4">
                    <h6>File Format:</h6>
                    <p>Your Excel file should have the following columns in order:</p>
                    <ol class="mb-3">
                        <li>Certificate No (Required)</li>
                        <li>Admission No (Required)</li>
                        <li>Course</li>
                        <li>Student Name (Required)</li>
                        <li>Start Date (YYYY-MM-DD)</li>
                        <li>End Date (YYYY-MM-DD)</li>
                        <li>Date of Issue (YYYY-MM-DD)</li>
                        <li>Status (Pending/Verified/Rejected)</li>
                    </ol>
                </div>
            </div>
        </div>
    </div>
</div>

<?= $this->section('scripts') ?>
<script>
$(document).ready(function() {
    // Handle update status button clicks
    $(document).on('click', '.update-status-btn', function() {
        const status = $(this).data('status');
        if (!confirm(`Are you sure you want to ${status.toLowerCase()} this certificate?`)) {
            return;
        }
        
        $.ajax({
            url: '<?= site_url('admin/certificate/updateStatus') ?>',
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': '<?= csrf_hash() ?>',
                'X-Requested-With': 'XMLHttpRequest'
            },
            data: {
                id: certificateId,
                status: status,
                csrf_token: '<?= csrf_hash() ?>'
            },
            dataType: 'json',
            success: function(response) {
                if (response && response.success) {
                    showAlert('success', response.message || `Certificate ${status.toLowerCase()} successfully`);
                    // Reload the page to reflect the status change
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    const errorMsg = response && response.message ? response.message : `Failed to ${status.toLowerCase()} certificate`;
                    showAlert('danger', errorMsg);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error:', status, error);
                let errorMsg = `An error occurred while ${status.toLowerCase()}ing the certificate`;
                
                try {
                    const response = xhr.responseJSON || (xhr.responseText ? JSON.parse(xhr.responseText) : null);
                    if (response && response.message) {
                        errorMsg = response.message;
                    } else if (xhr.statusText) {
                        errorMsg += ` (${xhr.status} ${xhr.statusText})`;
                    }
                } catch (e) {
                    console.error('Error parsing error response:', e);
                }
                
                showAlert('danger', errorMsg);
            }
        });
    }

    // Handle update status button clicks
    $(document).on('click', '.update-status-btn', function() {
        const button = $(this);
        const certificateId = button.data('id');
        const status = button.data('status');
        
        updateStatus(certificateId, status);
    });

    // Handle delete button clicks
    $(document).on('click', '.delete-certificate-btn', function() {
        const button = $(this);
        const certificateId = button.data('id');
        
        if (!confirm('Are you sure you want to delete this certificate?')) {
            return;
        }
        
        $.ajax({
            url: '<?= site_url('admin/certificate/delete') ?>',
            type: 'POST',
            headers: {
                'X-CSRF-TOKEN': '<?= csrf_hash() ?>',
                'X-Requested-With': 'XMLHttpRequest'
            },
            data: {
                id: certificateId,
                csrf_token: '<?= csrf_hash() ?>'
            },
            dataType: 'json',
            success: function(response) {
                if (response && response.success) {
                    showAlert('success', response.message || 'Certificate deleted successfully');
                    // Remove the deleted row from the table
                    button.closest('tr').fadeOut(400, function() {
                        $(this).remove();
                    });
                } else {
                    const errorMsg = response && response.message ? response.message : 'Failed to delete certificate';
                    showAlert('danger', errorMsg);
                }
            },
            error: function(xhr, status, error) {
                console.error('Error:', status, error);
                let errorMsg = 'An error occurred while deleting the certificate';
                
                try {
                    const response = xhr.responseJSON || (xhr.responseText ? JSON.parse(xhr.responseText) : null);
                    if (response && response.message) {
                        errorMsg = response.message;
                    } else if (xhr.statusText) {
                        errorMsg += ` (${xhr.status} ${xhr.statusText})`;
                    }
                } catch (e) {
                    console.error('Error parsing error response:', e);
                }
                
                showAlert('danger', errorMsg);
            }
        });
    });
    
    // Handle file input change
    $('#excel_file').on('change', function() {
        const fileName = $(this).val().split('\\').pop();
        $(this).next('.form-text').before(`<div class="mt-1 small">Selected: ${fileName}</div>`);
    });
    
    // Handle form submission
    $('#importForm').on('submit', function(e) {
        e.preventDefault();
        console.log('Form submission started');
        
        const form = $(this);
        const formData = new FormData(this);
        const importUrl = form.attr('action');
        const progressBar = $('#importProgress');
        const submitBtn = form.find('button[type="submit"]');
        const importAlert = $('#importAlert');
        
        // Show loading state
        importAlert.addClass('d-none').removeClass('alert-success alert-danger').empty();
        progressBar.removeClass('d-none');
        submitBtn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Importing...');
        
        console.log('Sending AJAX request to:', importUrl);
        
        // Create a new XHR object for better control
        const xhr = new XMLHttpRequest();
        
        // Set up the request
        xhr.open('POST', importUrl, true);
        
        // Set request headers - must be after open() and before send()
        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        xhr.setRequestHeader('Accept', 'application/json');
        
        // Get CSRF token from meta tag
        const csrfMeta = document.querySelector('meta[name="csrf-token"]');
        const csrfToken = csrfMeta ? csrfMeta.getAttribute('content') : '';
        
        // Log the token for debugging
        console.log('CSRF Token:', csrfToken ? 'Found' : 'Not found');
        
        if (csrfToken) {
            xhr.setRequestHeader('X-CSRF-TOKEN', csrfToken);
            formData.set('<?= csrf_token() ?>', csrfToken);
        } else {
            console.warn('CSRF token not found in meta tags');
        }
        
        // Upload progress
        xhr.upload.onprogress = function(e) {
            if (e.lengthComputable) {
                const percentComplete = (e.loaded / e.total) * 100;
                progressBar.find('.progress-bar').css('width', percentComplete + '%')
                    .attr('aria-valuenow', percentComplete)
                    .text(percentComplete.toFixed(1) + '%');
            }
        };
        
        // Handle request completion
        xhr.onload = function() {
            progressBar.addClass('d-none');
            submitBtn.prop('disabled', false).html('<i class="fas fa-upload me-1"></i> Import');
            
            try {
                const response = JSON.parse(xhr.responseText);
                console.log('Import response:', response);
                
                if (response.success) {
                    // Show success message in alert
                    importAlert.removeClass('d-none alert-danger').addClass('alert-success')
                        .html(`<i class="fas fa-check-circle me-2"></i>${response.message}`);
                    
                    // Close the modal
                    $('#importModal').modal('hide');
                    
                    // Reload the certificates table after a short delay
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    let errorMessage = response.message || 'An error occurred during import.';
                    if (response.errors && response.errors.length > 0) {
                        errorMessage += '<ul class="mb-0 mt-2">';
                        response.errors.forEach(error => {
                            errorMessage += `<li>${error}</li>`;
                        });
                        errorMessage += '</ul>';
                    }
                    importAlert.removeClass('d-none alert-success').addClass('alert-danger')
                        .html(`<i class="fas fa-exclamation-circle me-2"></i>${errorMessage}`);
                }
            } catch (e) {
                console.error('Error parsing response:', e);
                importAlert.removeClass('d-none alert-success').addClass('alert-danger')
                    .html('<i class="fas fa-exclamation-circle me-2"></i>Error processing server response');
            }
            
            // Scroll to alert
            $('html, body').animate({
                scrollTop: importAlert.offset().top - 20
            }, 500);
        };
        
        // Handle request error
        xhr.onerror = function() {
            console.error('Request failed');
            progressBar.addClass('d-none');
            submitBtn.prop('disabled', false).html('<i class="fas fa-upload me-1"></i> Import');
            
            importAlert.removeClass('d-none alert-success').addClass('alert-danger')
                .html('<i class="fas fa-exclamation-circle me-2"></i>Request failed. Please check your connection and try again.');
                
            // Scroll to alert
            $('html, body').animate({
                scrollTop: importAlert.offset().top - 20
            }, 500);
        };
        
        // Send the request
        xhr.send(formData);
        
        // Prevent default form submission
        return false;
        });
    });
    
    // Reset form when modal is closed
    $('#importModal').on('hidden.bs.modal', function () {
        $('#importForm')[0].reset();
        $('#importAlert').addClass('d-none').empty();
        $('.progress-bar').css('width', '0%').attr('aria-valuenow', '0');
    });

    // Store the current certificate ID for modal actions
    let currentCertificateId = null;
    
    // Set up CSRF token for all AJAX requests
    $.ajaxSetup({
        headers: {
            'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
    });
    
    // Handle approve button click
    $(document).on('click', '.approve-certificate', function(e) {
        e.preventDefault();
        currentCertificateId = $(this).data('id');
        $('#approveModal').modal('show');
    });
    
    // Handle reject button click
    $(document).on('click', '.reject-certificate', function(e) {
        e.preventDefault();
        currentCertificateId = $(this).data('id');
        $('#rejectModal').modal('show');
    });
    
    // Handle edit button click
    $(document).on('click', '.edit-certificate', function(e) {
        e.preventDefault();
        currentCertificateId = $(this).data('id');
        console.log('Loading certificate data for ID:', currentCertificateId);
        loadCertificateData(currentCertificateId);
    });
    
    // Handle delete button click
    $(document).on('click', '.delete-certificate', function(e) {
        e.preventDefault();
        currentCertificateId = $(this).data('id');
        const deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
        deleteModal.show();
    });
    
    // Function to load certificate data into edit form
    function loadCertificateData(certificateId) {
        console.log('Loading certificate data...');
        $.ajax({
            url: '<?= base_url('admin/certificate/') ?>' + certificateId,
            type: 'GET',
            dataType: 'json',
            beforeSend: function() {
                console.log('Sending request to:', '<?= base_url('admin/certificate/') ?>' + certificateId);
            },
            success: function(response) {
                console.log('Response received:', response);
                if (response.success) {
                    const cert = response.data;
                    $('#editId').val(cert.id);
                    $('#editCertificateNo').val(cert.certificate_no);
                    $('#editStudentName').val(cert.student_name);
                    $('#editCourse').val(cert.course);
                    $('#editDateOfIssue').val(cert.date_of_issue.split(' ')[0]);
                    
                    if ($('#editStatus').length) {
                        $('#editStatus').val(cert.status);
                    }
                    
                    // Show the edit modal
                    const editModal = new bootstrap.Modal(document.getElementById('editModal'));
                    editModal.show();
                } else {
                    showAlert('danger', response.message || 'Failed to load certificate data');
                }
            },
            error: function(xhr, status, error) {
                console.error('Error loading certificate:', error);
                showAlert('danger', 'Error loading certificate data. Please try again.');
            }
        });
    }
        
        // Remove any existing alerts
        $('.alert-dismissible').alert('close');
        
        // Add new alert
        $('.content-wrapper').prepend(alertHtml);
        
        // Auto-close after 5 seconds
        setTimeout(() => {
            $('.alert-dismissible').alert('close');
        }, 5000);
    }

    // Confirm Approve
    $(document).on('click', '#confirmApprove', function() {
        console.log('Approve clicked for ID:', currentCertificateId);
        if (currentCertificateId) {
            updateStatus(currentCertificateId, 'Verified');
            $('#approveModal').modal('hide');
        }
    });

    // Confirm Reject
    $(document).on('click', '#confirmReject', function() {
        console.log('Reject clicked for ID:', currentCertificateId);
        if (currentCertificateId) {
            updateStatus(currentCertificateId, 'Rejected');
            $('#rejectModal').modal('hide');
        }
    });    // Confirm Delete
    $('#confirmDelete').on('click', function() {
        if (currentCertificateId) {
            deleteCertificate(currentCertificateId);
            const deleteModal = bootstrap.Modal.getInstance(document.getElementById('deleteModal'));
            if (deleteModal) deleteModal.hide();
        }
    });

    // Handle edit form submission
    $('#editCertificateForm').on('submit', function(e) {
        e.preventDefault();
        
        const formData = $(this).serialize();
        
        $.ajax({
            url: '<?= base_url('admin/certificate/update') ?>',
            type: 'POST',
            data: formData,
            success: function(response) {
                if (response.success) {
                    showAlert('success', 'Certificate updated successfully');
                    $('#editModal').modal('hide');
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert('danger', response.message || 'Failed to update certificate');
                }
            },
            error: function() {
                showAlert('danger', 'Error updating certificate');
            }
        });
    });

    // Function to update certificate status
    function updateCertificateStatus(certificateId, status) {
        $.ajax({
            url: '<?= site_url('admin/certificate/update-status') ?>',
            type: 'POST',
            data: {
                id: certificateId,
                status: status,
                '<?= csrf_token() ?>': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                const result = typeof response === 'string' ? JSON.parse(response) : response;
                if (result.success) {
                    showAlert('success', result.message);
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert('danger', result.message || 'An error occurred. Please try again.');
                }
            },
            error: function() {
                showAlert('danger', 'An error occurred. Please try again.');
            }
        });
    }

  // Function to delete certificate
function deleteCertificate(certificateId) {
    if (!confirm('Are you sure you want to delete this certificate?')) {
        return;
    }
    
    $.ajax({
        url: '<?= site_url('admin/certificate/delete') ?>',
        type: 'POST',
        headers: {
            'X-CSRF-TOKEN': '<?= csrf_hash() ?>',
            'X-Requested-With': 'XMLHttpRequest'
        },
        data: {
            id: certificateId,
            csrf_token: '<?= csrf_hash() ?>'
        },
        dataType: 'json',
        success: function(response) {
            if (response && response.success) {
                showAlert('success', response.message || 'Certificate deleted successfully');
                // Remove the deleted row from the table
                $(`[data-id="${certificateId}"]`).closest('tr').fadeOut(400, function() {
                    $(this).remove();
                });
            } else {
                const errorMsg = response && response.message ? response.message : 'Failed to delete certificate';
                showAlert('danger', errorMsg);
            }
        },
        error: function(xhr, status, error) {
            console.error('Error:', status, error);
            let errorMsg = 'An error occurred while deleting the certificate';
            
            try {
                const response = xhr.responseJSON || (xhr.responseText ? JSON.parse(xhr.responseText) : null);
                if (response && response.message) {
                    errorMsg = response.message;
                } else if (xhr.statusText) {
                    errorMsg += ` (${xhr.status} ${xhr.statusText})`;
                }
            } catch (e) {
                console.error('Error parsing error response:', e);
            }
            
            showAlert('danger', errorMsg);
        }
    });
}

    // Helper function to show alerts
    function showAlert(type, message) {
        const alertHtml = `
            <div class="alert alert-${type} alert-dismissible fade show" role="alert">
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        `;
        
        // Remove any existing alerts
        $('.alert-dismissible').alert('close');
        
        // Add new alert
        $('.content-wrapper').prepend(alertHtml);
        
        // Auto-close after 5 seconds
        setTimeout(() => {
            $('.alert-dismissible').alert('close');
        }, 5000);
    }
});
</script>
<?= $this->endSection() ?>

<?= $this->section('styles') ?>
<style>
    /* Enhanced Pagination Styles */
    .pagination {
        margin: 1.5rem 0;
        display: flex;
        justify-content: center;
        gap: 4px;
    }
    
    .pagination .page-item {
        margin: 0;
    }
    
    .pagination .page-link {
        color: #4e73df;
        border: 1px solid #e3e6f0;
        background-color: #fff;
        padding: 0.5rem 0.9rem;
        border-radius: 6px;
        transition: all 0.2s ease-in-out;
        font-weight: 500;
        min-width: 40px;
        text-align: center;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }
    
    .pagination .page-item.active .page-link {
        background: linear-gradient(135deg, #4e73df 0%, #3a56c9 100%);
        border-color: #3a56c9;
        color: white;
        box-shadow: 0 2px 4px rgba(78, 115, 223, 0.3);
    }
    
    .pagination .page-link:hover:not(.active) {
        background-color: #f8f9fc;
        border-color: #d1d3e2;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    
    .pagination .page-item.disabled .page-link {
        color: #b7b9cc;
        background-color: #f8f9fc;
        border-color: #e3e6f0;
        box-shadow: none;
    }
    
    .pagination .page-item:first-child .page-link,
    .pagination .page-item:last-child .page-link {
        padding: 0.5rem 0.9rem;
        border-radius: 6px;
    }
    
    .pagination .page-item .page-link i {
        font-size: 0.75rem;
    }
    
    /* Pagination info */
    .pagination-info {
        color: #6c757d;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
        .pagination {
            flex-wrap: wrap;
            gap: 3px;
        }
        
        .pagination .page-link {
            padding: 0.4rem 0.7rem;
            min-width: 36px;
            font-size: 0.875rem;
        }
        
        .pagination-info {
            width: 100%;
            justify-content: center;
            margin-top: 10px;
            order: 2;
        }
    }
<script>
// Function to update certificate status
function updateStatus(certificateId, status) {
    $.ajax({
        url: '<?= site_url('admin/certificate/updateStatus') ?>',
        type: 'POST',
        headers: {
            'X-CSRF-TOKEN': '<?= csrf_hash() ?>',
            'X-Requested-With': 'XMLHttpRequest'
        },
        data: {
            id: certificateId,
            status: status,
            '<?= csrf_token() ?>': $('meta[name="csrf-token"]').attr('content')
        },
        dataType: 'json',
        success: function(response) {
            const result = typeof response === 'string' ? JSON.parse(response) : response;
            if (result.success) {
                showAlert('success', 'Certificate ' + status.toLowerCase() + ' successfully');
                // Reload the page after a short delay
                setTimeout(() => window.location.reload(), 1000);
            } else {
                showAlert('danger', result.message || 'Failed to update certificate status');
            }
        },
        error: function(xhr, status, error) {
            console.error('Error:', error);
            showAlert('danger', 'An error occurred while updating the certificate status');
        }
    });
}

// Function to show alerts
function showAlert(type, message) {
    const alertHtml = `
        <div class="alert alert-${type} alert-dismissible fade show" role="alert">
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    `;
    document.getElementById('alertContainer').innerHTML = alertHtml;
    setTimeout(() => {
        const alert = document.querySelector('.alert');
        if (alert) {
            alert.remove();
        }
    }, 3000);
}

// Helper function to send AJAX requests
async function sendRequest(url, data) {
    try {
        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-TOKEN': '<?= csrf_hash() ?>'
            },
            body: data
        });
        
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        
        const result = await response.json();
        
        if (result.success) {
            showAlert('success', result.message);
            setTimeout(() => window.location.reload(), 1000);
        } else {
            showAlert('danger', result.message || 'Operation failed');
        }
    } catch (error) {
        console.error('Error:', error);
        showAlert('danger', 'An error occurred');
    }
}

// Function to update certificate status
async function updateStatus(id, status) {
    if (!confirm(`Are you sure you want to ${status.toLowerCase()} this certificate?`)) {
        return;
    }
    
    const formData = new FormData();
    formData.append('id', id);
    formData.append('status', status);
    
    await sendRequest('<?= site_url('admin/certificate/update-status') ?>', formData);
}

// Function to load and show edit form
async function editCertificate(id) {
    try {
        const response = await fetch(`<?= site_url('admin/certificate/') ?>${id}`);
        const result = await response.json();
        
        if (result.success) {
            const cert = result.data;
            document.getElementById('editId').value = cert.id;
            document.getElementById('editCertificateNo').value = cert.certificate_no;
            document.getElementById('editStudentName').value = cert.student_name;
            document.getElementById('editCourse').value = cert.course;
            document.getElementById('editDateOfIssue').value = cert.date_of_issue.split(' ')[0];
            
            const statusField = document.getElementById('editStatus');
            if (statusField) {
                statusField.value = cert.status;
            }
            
            const modal = new bootstrap.Modal(document.getElementById('editModal'));
            modal.show();
        } else {
            showAlert('danger', 'Failed to load certificate data');
        }
    } catch (error) {
        console.error('Error:', error);
        showAlert('danger', 'Failed to load certificate data');
    }
}

// Function to handle form submission
async function updateCertificate(event) {
    event.preventDefault();
    const formData = new FormData(event.target);
    await sendRequest('<?= site_url('admin/certificate/update') ?>', formData);
    const modal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
    modal.hide();
    return false;
}

// Function to delete certificate
async function deleteCertificate(id) {
    if (!confirm('Are you sure you want to delete this certificate? This action cannot be undone.')) {
        return;
    }
    
    const formData = new FormData();
    formData.append('id', id);
    
    await sendRequest('<?= site_url('admin/certificate/delete') ?>', formData);
}

// Add event listeners when the document is ready
document.addEventListener('DOMContentLoaded', function() {
    // Handle edit button clicks
    document.querySelectorAll('.edit-btn').forEach(button => {
        button.addEventListener('click', function() {
            const certId = this.getAttribute('data-id');
            const certNo = this.getAttribute('data-certificate_no');
            const studentName = this.getAttribute('data-student_name');
            const course = this.getAttribute('data-course');
            const dateOfIssue = this.getAttribute('data-date_of_issue');
            
            // Set values in the edit modal
            document.getElementById('edit_id').value = certId;
            document.getElementById('edit_certificate_no').value = certNo;
            document.getElementById('edit_student_name').value = studentName;
            document.getElementById('edit_course').value = course;
            document.getElementById('edit_date_of_issue').value = dateOfIssue;
            
            // Show the modal
            const editModal = new bootstrap.Modal(document.getElementById('editModal'));
            editModal.show();
        });
    });
    
    // Handle edit form submission
    const editForm = document.getElementById('editForm');
    if (editForm) {
        editForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            // Add CSRF token to form data
            formData.append('csrf_token', '<?= csrf_hash() ?>');
            
            fetch('<?= site_url('admin/certificate/update') ?>', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest',
                    'X-CSRF-TOKEN': '<?= csrf_hash() ?>'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showAlert('success', 'Certificate updated successfully');
                    // Hide the modal
                    const editModal = bootstrap.Modal.getInstance(document.getElementById('editModal'));
                    editModal.hide();
                    // Reload the page after a short delay
                    setTimeout(() => window.location.reload(), 1000);
                } else {
                    showAlert('danger', data.message || 'Failed to update certificate');
                }
            })
    }

    // Handle delete button clicks
    $(document).on('click', '.delete-certificate-btn', function() {
        const certificateId = $(this).data('id');
        if (!confirm('Are you sure you want to delete this certificate?')) {
            return;
        }
        
        $.ajax({
            url: '<?= site_url('admin/certificate/delete') ?>',
            type: 'POST',
            data: {
                id: certificateId,
                '<?= csrf_token() ?>': $('meta[name="csrf-token"]').attr('content')
            },
            success: function(response) {
                const result = typeof response === 'string' ? JSON.parse(response) : response;
                if (result.success) {
                    showAlert('success', result.message);
                    // Fade out and remove the row
                    $(`[data-id="${certificateId}"]`).closest('tr').fadeOut(400, function() {
                        $(this).remove();
                    });
                } else {
                    showAlert('danger', result.message || 'An error occurred. Please try again.');
                }
            },
            error: function() {
                showAlert('danger', 'An error occurred. Please try again.');
            }
        });
    });
});

// Function to show alerts
function showAlert(type, message) {
    const alertContainer = document.getElementById('alertContainer');
    if (alertContainer) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        alertContainer.appendChild(alertDiv);
        
        // Auto-dismiss after 5 seconds
        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }
}
</script>
<?= $this->endSection() ?>
<?= $this->endSection() ?>

<?= $this->endSection() ?>